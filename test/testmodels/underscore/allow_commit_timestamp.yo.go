// Code generated by yo. DO NOT EDIT.
// Package models contains the types.
package models

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
)

// AllowCommitTimestamp represents a row from 'AllowCommitTimestamp'.
type AllowCommitTimestamp struct {
	CreatedAt time.Time `spanner:"CreatedAt" json:"CreatedAt"` // CreatedAt
}

func AllowCommitTimestampPrimaryKeys() []string {
	return []string{
		"CreatedAt",
	}
}

func AllowCommitTimestampColumns() []string {
	return []string{
		"CreatedAt",
	}
}

func AllowCommitTimestampWritableColumns() []string {
	return []string{
		"CreatedAt",
	}
}

func (act *AllowCommitTimestamp) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "CreatedAt":
			ret = append(ret, &act.CreatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (act *AllowCommitTimestamp) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "CreatedAt":
			ret = append(ret, act.CreatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newAllowCommitTimestamp_Decoder returns a decoder which reads a row from *spanner.Row
// into AllowCommitTimestamp. The decoder is not goroutine-safe. Don't use it concurrently.
func newAllowCommitTimestamp_Decoder(cols []string) func(*spanner.Row) (*AllowCommitTimestamp, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*AllowCommitTimestamp, error) {
		var act AllowCommitTimestamp
		ptrs, err := act.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &act, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (act *AllowCommitTimestamp) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := act.columnsToValues(AllowCommitTimestampWritableColumns())
	return spanner.Insert("AllowCommitTimestamp", AllowCommitTimestampWritableColumns(), values)
}

// Delete deletes the AllowCommitTimestamp from the database.
func (act *AllowCommitTimestamp) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := act.columnsToValues(AllowCommitTimestampPrimaryKeys())
	return spanner.Delete("AllowCommitTimestamp", spanner.Key(values))
}
